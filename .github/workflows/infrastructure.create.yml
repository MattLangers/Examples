name: IaC

on:
  workflow_call:
    inputs:
      artifactNameTerraform:
        required: true
        type: string
      environment:
        required: true
        type: string
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      AZURE_SQL_INSTANCE_NAME:
        required: true
      AZURE_SQL_INSTANCE_ADMINISTRATOR_LOGIN_USERNAME:
        required: true
      AZURE_SQL_INSTANCE_ADMINISTRATOR_LOGIN_PASSWORD:
        required: true
      AZURE_SQL_PRODUCT_CATALOGUE_LOGIN_USERNAME:
        required: true
      AZURE_SQL_PRODUCT_CATALOGUE_LOGIN_PASSWORD:
        required: true
    outputs:
      static_website_url:
        value: ${{ jobs.infrastructure_create.outputs.static_website_url }}
      static_webapp_api_key: 
        value: ${{ jobs.infrastructure_create.outputs.static_webapp_api_key }}
      api_app_name: 
        value: ${{ jobs.infrastructure_create.outputs.api_app_name }}
      resource_group_name: 
        value: ${{ jobs.infrastructure_create.outputs.resource_group_name }}

jobs:
  infrastructure_create:
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    outputs:
      static_website_url: ${{ steps.apply.outputs.static_website_url }}
      static_webapp_api_key: ${{ steps.get_config_key.outputs.api_key }}
      api_app_name: ${{ steps.apply.outputs.api_app_name }}
      resource_group_name: ${{ steps.apply.outputs.resource_group_name }}
    steps:
      - uses: actions/checkout@v3
        with:
            fetch-depth: 0

      - uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.8
          terraform_wrapper: false

      - name: Terraform Init Main
        id: init
        working-directory: "./artifacts/${{inputs.artifactNameTerraform}}"
        run: terraform init
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true

      - name: Terraform Plan Main
        id: plan
        working-directory: "./artifacts/${{ inputs.artifactNameTerraform }}"
        run: > 
          terraform plan -out main.tfplan -no-color 
          -var environment_prefix="${{ inputs.environment }}" 
          -var sql_instance_name="${{ secrets.AZURE_SQL_INSTANCE_NAME }}"
          -var sql_instance_administrator_login_username="${{ secrets.AZURE_SQL_INSTANCE_ADMINISTRATOR_LOGIN_USERNAME }}"
          -var sql_instance_administrator_login_password="${{ secrets.AZURE_SQL_INSTANCE_ADMINISTRATOR_LOGIN_PASSWORD }}"
          -var sql_login_username="${{ secrets.AZURE_SQL_PRODUCT_CATALOGUE_LOGIN_USERNAME }}"
          -var sql_login_password="${{ secrets.AZURE_SQL_PRODUCT_CATALOGUE_LOGIN_PASSWORD }}"
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true

      - name: Terraform Apply Main
        id: apply
        working-directory: "./artifacts/${{inputs.artifactNameTerraform}}"
        run: |
          terraform apply main.tfplan

          resource_group_name=$(terraform output -raw resource_group_name)
          echo "::set-output name=resource_group_name::$resource_group_name"

          api_app_name=$(terraform output -raw api_app_name)
          echo "::set-output name=api_app_name::$api_app_name"

          static_website_name=$(terraform output -raw static_website_name)
          echo "::set-output name=static_website_name::$static_website_name"

          static_website_url=$(terraform output -raw static_website_default_host_name)
          static_website_url="https://$static_website_url"
          echo "::set-output name=static_website_url::$static_website_url"
        
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true

      - name: Get static website api key
        id: get_config_key
        run: >
          $api_key=$(az staticwebapp secrets list --name ${{ steps.apply.outputs.static_website_name }} 
          --query properties.apiKey 
          --output tsv)

          Write-Output "::add-mask $($api_key)"
          
          Write-Output "::set-output name=api_key::$($api_key)"
        shell: pwsh