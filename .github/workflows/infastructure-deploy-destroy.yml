name: IaC

on:
  workflow_call:
    inputs:
      artifactNameAPI:
        required: true
        type: string
      artifactNameSql:
        required: true
        type: string
      artifactNameTerraform:
        required: true
        type: string
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      AZURE_sql_instance_administrator_login_username:
        required: true
      AZURE_sql_instance_administrator_login_password:
        required: true

jobs:
  infastructure:
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: artifacts
          
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: artifacts

      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.0

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: "./artifacts/${{inputs.artifactNameTerraform}}"
        continue-on-error: true
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true

      - name: Terraform Plan
        id: plan
        run: terraform plan -out main.tfplan -no-color -var sql_instance_administrator_login_username="${{ secrets.AZURE_sql_instance_administrator_login_username }}" -var sql_instance_administrator_login_password="${{ secrets.AZURE_sql_instance_administrator_login_password }}"
        working-directory: "./artifacts/${{inputs.artifactNameTerraform}}"
        continue-on-error: true
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true

      - name: Terraform Apply
        id: apply
        run: |
          terraform apply main.tfplan
          echo "::set-output name={app_name}::{$(terraform output app_name)}"
          echo "::set-output name={sql_instance_name}::{$(terraform output sql_instance_name)}"
          echo "::set-output name={sql_database_name}::{$(terraform output sql_database_name)}"
        working-directory: "./artifacts/${{inputs.artifactNameTerraform}}"
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true

      - name: 'Run Azure webapp deploy action using publish profile credentials'
        uses: azure/webapps-deploy@v2
        with: 
          app-name: ${{ steps.apply.outputs.app_name }}
          package: "./artifacts/${{inputs.artifactNameAPI}}"

      - name: setup connection string
        id: setSqlConnection
        run: |
          $connectionStringJson = '[{"name": "ProductCatalogue","value": "connectionstring","slotSetting": false}]'
          $connectionString = $(az sql db show-connection-string -s tcp:${{ steps.apply.outputs.sql_instance_name}} -n ${{ steps.apply.outputs.sql_database_name}} -c ado.net).Replace("<password>", "${{ secrets.AZURE_sql_instance_administrator_login_password }}").Replace("<username>", "${{ secrets.AZURE_sql_instance_administrator_login_username }}")
          $connectionStringJson = $connectionStringJson.Replace("connectionstring", $connectionString)
          set-output name=connectionString::$($connectionString)
          set-output name=connectionStringJson::$($connectionStringJson)

      - name: Set Web App ACR authentication
        uses: Azure/appservice-settings@v1
        with:
          app-name: ${{ steps.apply.outputs.app_name }}
          connection-strings-json: ${{ steps.setSqlConnection.outputs.connectionStringJson}}
    
      - name: Azure SQL Deploy
        uses: Azure/sql-action@v1
        with:
          server-name: ${{ steps.apply.outputs.sql_instance_name }}
          connection-string: ${{ steps.setSqlConnection.outputs.connectionString}}
          sql-file: "./artifacts/${{inputs.artifactNameSql}}/product-catalogue-migration-script.sql"

      - name: Terraform destroy
        id: destroy
        run: terraform destroy -auto-approve
        working-directory: "./artifacts/${{inputs.artifactNameTerraform}}"
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true
  
      - name: 'Logout az'
        run: az logout
