name: IaC

on:
  workflow_call:
    inputs:
      artifactNameAPI:
        required: true
        type: string
      artifactNameSql:
        required: true
        type: string
      artifactNameTerraform:
        required: true
        type: string
      environment:
        required: true
        type: string
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      AZURE_SQL_INSTANCE_ADMINISTRATOR_LOGIN_USERNAME:
        required: true
      AZURE_SQL_INSTANCE_ADMINISTRATOR_LOGIN_PASSWORD:
        required: true
      AZURE_SQL_INSTANCE_NAME:
        required: true

jobs:
  infastructure:
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: artifacts

      - run: ls -R
        working-directory: "./artifacts"

      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.0
        with:
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        working-directory: "./artifacts/${{inputs.artifactNameTerraform}}"
        run: terraform init
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true

      - name: Terraform Plan
        id: plan
        working-directory: "./artifacts/${{ inputs.artifactNameTerraform }}"
        run: terraform plan -out main.tfplan -no-color -var sql_instance_administrator_login_username="${{ secrets.AZURE_SQL_INSTANCE_ADMINISTRATOR_LOGIN_USERNAME }}" -var sql_instance_administrator_login_password="${{ secrets.AZURE_SQL_INSTANCE_ADMINISTRATOR_LOGIN_PASSWORD }}" -var environment_prefix="${{ inputs.environment }}" -var sql_instance_name="${{ secrets.AZURE_SQL_INSTANCE_NAME }}"
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true

      - name: Terraform Apply
        id: apply
        working-directory: "./artifacts/${{inputs.artifactNameTerraform}}"
        run: |
          terraform apply main.tfplan

          resource_group_name=$(terraform output resource_group_name)
          echo "::set-output name=resource_group_name::$resource_group_name"

          app_name=$(terraform output app_name)
          echo "::set-output name=app_name::$app_name"

          sql_instance_name=$(terraform output sql_instance_name)
          echo "::set-output name=sql_instance_name::$sql_instance_name"

          sql_database_name=$(terraform output sql_database_name)
          echo "::set-output name=sql_database_name::$sql_database_name"
        
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true

      - name: Init Terraform Firewall rules
        working-directory: "./artifacts/${{inputs.artifactNameTerraform}}/firewall-rules"
        run: terraform init
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true

      - name: Plan Terraform Firewall rules
        working-directory: "./artifacts/${{inputs.artifactNameTerraform}}/firewall-rules"
        run: terraform plan -out main.tfplan -no-color
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true

      - name: Apply Terraform Firewall rules
        working-directory: "./artifacts/${{inputs.artifactNameTerraform}}/firewall-rules"
        run: terraform apply main.tfplan
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true

      - name: List webapp details
        run: | 
          az webapp list --query "[].{hostName: defaultHostName, name: name}"
      
      ## its not possible to deploy to a B1 webapp using azure/webapps-deploy@v2
      - name: Deploy web app source code
        working-directory: "./artifacts/${{inputs.artifactNameAPI}}"
        run: | 
          az webapp deployment source config-zip -g ${{ steps.apply.outputs.resource_group_name }} -n ${{ steps.apply.outputs.app_name }} --src api.zip
      
      - name: Configure connection string
        id: setSqlConnection
        run: |
          $connection_string = $(az sql db show-connection-string -s ${{ steps.apply.outputs.sql_instance_name }} -n ${{ steps.apply.outputs.sql_database_name }} -c ado.net)
          $connection_string = $connection_string.Replace("<password>", "${{ secrets.AZURE_SQL_INSTANCE_ADMINISTRATOR_LOGIN_PASSWORD }}")
          $connection_string = $connection_string.Replace("<username>", "${{ secrets.AZURE_SQL_INSTANCE_ADMINISTRATOR_LOGIN_USERNAME }}")
          Write-Output "::set-output name=connection_string::'$($connection_string)'"
        shell: pwsh

      - name: Setup connection string for webapp
        run: | 
          az webapp config connection-string set -g ${{ steps.apply.outputs.resource_group_name }} -n ${{ steps.apply.outputs.app_name }} -t SQLAzure \
          --settings ProductCatalogue='${{ steps.setSqlConnection.outputs.connection_string }}'
    
      - name: Azure SQL Deploy
        uses: azure/sql-action@v1.3
        with:
          connection-string: '${{ steps.setSqlConnection.outputs.connection_string }}'
          sql-file: "./artifacts/${{inputs.artifactNameSql}}/product-catalogue-migration-script.sql"

      - uses: matt-ball/newman-action@master
        name: Postman integration tests
        working-directory: "./artifacts/Postman"
        with:
          collection: Product Catalogue.postman_collection.json
          environment: Product Catalogue.postman_environment.json
          envVar: '[{ "key": "product_catalogue_url", "value": "https://mrmclangleydevproductcatalogue.azurewebsites.net" }]'
          
      - name: Terraform destroy
        id: destroy
        run: terraform destroy -auto-approve
        working-directory: "./artifacts/${{inputs.artifactNameTerraform}}"
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true
  
      - name: 'Logout az'
        run: az logout