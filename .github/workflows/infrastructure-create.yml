name: IaC

on:
  workflow_call:
    inputs:
      artifactNameAPI:
        required: true
        type: string
      artifactNameSqlMigration:
        required: true
        type: string
      artifactNameSqlAzureAdPermissions:
        required: true
        type: string
      artifactNameTerraform:
        required: true
        type: string
      environment:
        required: true
        type: string
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      AZURE_SQL_INSTANCE_NAME:
        required: true
      AZURE_SQL_DATABASE_PRODUCTCATALOGUE_CONNECTION_STRING:
        required: true
      AZURE_SQL_SERVER_AD_ADMIN_OBJECT_ID:
        required: true
      AZURE_SQL_SERVER_AD_ADMIN_USERNAME:
        required: true
    outputs:
      static_website_url:
        value: ${{ jobs.infrastructure_create.outputs.static_website_url }}

jobs:
  infrastructure_create:
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    outputs:
      static_website_url: ${{ steps.apply.outputs.static_website_url }}
    steps:
      - uses: actions/checkout@v3
        with:
            fetch-depth: 0

      - uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: build static website
        working-directory: ./UI
        run: >
          npm install

          echo >> .env.production
          
          echo VITE_PRODUCT_CATALOGUE_API_URL="https://mrmclangley${{ inputs.environment }}productcatalogue.azurewebsites.net/" >> .env.production
          
          npm run build

      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.0
        with:
          terraform_wrapper: false

      - name: Terraform Init Main
        id: init
        working-directory: "./artifacts/${{inputs.artifactNameTerraform}}"
        run: terraform init
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true

      - name: Terraform Plan Main
        id: plan
        working-directory: "./artifacts/${{ inputs.artifactNameTerraform }}"
        run: > 
          terraform plan -out main.tfplan -no-color 
          -var environment_prefix="${{ inputs.environment }}" 
          -var sql_instance_name="${{ secrets.AZURE_SQL_INSTANCE_NAME }}"
          -var sql_server_ad_admin_object_id="${{ secrets.AZURE_SQL_SERVER_AD_ADMIN_OBJECT_ID }}"
          -var sql_server_ad_admin_username="${{ secrets.AZURE_SQL_SERVER_AD_ADMIN_USERNAME }}"
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true

      - name: Terraform Apply Main
        id: apply
        working-directory: "./artifacts/${{inputs.artifactNameTerraform}}"
        run: |
          terraform apply main.tfplan

          resource_group_name=$(terraform output resource_group_name)
          echo "::set-output name=resource_group_name::$resource_group_name"

          api_app_name=$(terraform output api_app_name)
          echo "::set-output name=api_app_name::$api_app_name"

          static_website_name=$(terraform output static_website_name)
          echo "::set-output name=static_website_name::$static_website_name"

          static_website_name_default_host_name=$(terraform output static_website_name_default_host_name)
          echo "::set-output name=static_website_url::$static_website_name_default_host_name"
        
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_USE_OIDC: true

      - name: Get static website api key
        id: staticWebConfig
        run: >
          $api_key=$(az staticwebapp secrets list --name ${{ steps.apply.outputs.static_website_name }} 
          --query properties.apiKey 
          --output tsv)

          Write-Output "::add-mask $($api_key)"
          
          Write-Output "::set-output name=api_key::$($api_key)"
        shell: pwsh

      - name: Build and deploy static web app
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: "${{ steps.staticWebConfig.outputs.api_key }}"
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "UI/build/static"
          output_location: ""
          skip_app_build: true
      
      ## A B1 webapp doesn't have slots so I don't think its possible to deploy to a B1 webapp using azure/webapps-deploy@v2
      - name: Deploy api source code
        working-directory: artifacts/${{inputs.artifactNameAPI}}
        run: > 
          az webapp deployment source config-zip 
          -g ${{ steps.apply.outputs.resource_group_name }} 
          -n ${{ steps.apply.outputs.api_app_name }} --src api.zip
    
      - name: Azure SQL Deploy
        uses: azure/sql-action@v1.3
        with:
          connection-string: ${{ secrets.AZURE_SQL_DATABASE_PRODUCTCATALOGUE_CONNECTION_STRING }}
          sql-file: "./artifacts/${{inputs.artifactNameSqlMigration}}/product-catalogue-migration-script.sql"
    
      - name: Azure SQL Deploy
        uses: azure/sql-action@v1.3
        with:
          connection-string: ${{ secrets.AZURE_SQL_DATABASE_PRODUCTCATALOGUE_CONNECTION_STRING }}
          sql-file: "./artifacts/${{inputs.artifactNameSqlAzureAdPermissions}}/dev.user.sql"
  
      - name: 'Logout az'
        run: az logout