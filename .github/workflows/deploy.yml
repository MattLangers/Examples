name: deploy

on:
  workflow_call:
    inputs:
      artifactNameSqlMigration:
        required: true
        type: string
      artifactNameAPI:
        required: true
        type: string
      artifactNameStaticWebsite:
        required: true
        type: string
      api_app_name:
        required: true
        type: string
      resource_group_name:
        required: true
        type: string
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      AZURE_SQL_INSTANCE_NAME:
        required: true
      static_webapp_api_key:
        required: true
      AZURE_SQL_INSTANCE_ADMINISTRATOR_LOGIN_USERNAME:
        required: true
      AZURE_SQL_INSTANCE_ADMINISTRATOR_LOGIN_PASSWORD:
        required: true
      AZURE_SQL_PRODUCT_CATALOGUE_LOGIN_USERNAME:
        required: true
      AZURE_SQL_PRODUCT_CATALOGUE_LOGIN_PASSWORD:
        required: true

jobs:
  sql:
    runs-on: windows-latest
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          
      - name: Create firewall rule
        run: |
          $temp_firewall_rule_name = "temp_firewall_rule_name"
          az sql server firewall-rule create -g "dev_product_catalogue" -s "${{ secrets.AZURE_SQL_INSTANCE_NAME }}" -n $temp_firewall_rule_name --start-ip-address 0.0.0.0 --end-ip-address 0.0.0.0

      - name: Create login
        run: |
          $database_name = "master"
          $server_name = "${{ secrets.AZURE_SQL_INSTANCE_NAME }}"
          $query = "IF NOT EXISTS (SELECT name FROM master.sys.server_principals WHERE name = '${{ secrets.AZURE_SQL_PRODUCT_CATALOGUE_LOGIN_USERNAME }}') BEGIN CREATE LOGIN ${{ secrets.AZURE_SQL_PRODUCT_CATALOGUE_LOGIN_USERNAME }} WITH PASSWORD = N'${{ secrets.AZURE_SQL_PRODUCT_CATALOGUE_LOGIN_PASSWORD }}' END"
          Invoke-Sqlcmd -Query $query -ServerInstance "$($server_name).database.windows.net" -Database $database_name -Username ${{ secrets.AZURE_SQL_INSTANCE_ADMINISTRATOR_LOGIN_USERNAME }} -Password ${{ secrets.AZURE_SQL_INSTANCE_ADMINISTRATOR_LOGIN_PASSWORD }}
      
      - name: Create user
        run: |
          $database_name = "product_catalogue_dev"
          $server_name = "${{ secrets.AZURE_SQL_INSTANCE_NAME }}"
          $query = "if not exists(select * from sys.database_principals where name = '${{ secrets.AZURE_SQL_PRODUCT_CATALOGUE_LOGIN_USERNAME }}') BEGIN CREATE USER ${{ secrets.AZURE_SQL_PRODUCT_CATALOGUE_LOGIN_USERNAME }} FOR LOGIN ${{ secrets.AZURE_SQL_PRODUCT_CATALOGUE_LOGIN_USERNAME }}; END"
          Invoke-Sqlcmd -Query $query -ServerInstance "$($server_name).database.windows.net" -Database $database_name -Username ${{ secrets.AZURE_SQL_INSTANCE_ADMINISTRATOR_LOGIN_USERNAME }} -Password ${{ secrets.AZURE_SQL_INSTANCE_ADMINISTRATOR_LOGIN_PASSWORD }}
      
      - name: Grant permissions
        run: |
          $database_name = "product_catalogue_dev"
          $server_name = "${{ secrets.AZURE_SQL_INSTANCE_NAME }}"
          $query = "ALTER ROLE db_datareader ADD MEMBER ${{ secrets.AZURE_SQL_PRODUCT_CATALOGUE_LOGIN_USERNAME }} ALTER ROLE db_datawriter ADD MEMBER ${{ secrets.AZURE_SQL_PRODUCT_CATALOGUE_LOGIN_USERNAME }}"
          Invoke-Sqlcmd -Query $query -ServerInstance "$($server_name).database.windows.net" -Database $database_name -Username ${{ secrets.AZURE_SQL_INSTANCE_ADMINISTRATOR_LOGIN_USERNAME }} -Password ${{ secrets.AZURE_SQL_INSTANCE_ADMINISTRATOR_LOGIN_PASSWORD }}
          
      - name: Run migrations sql script
        working-directory: ${{github.workspace}}/artifacts/${{inputs.artifactNameSqlMigration}}
        run: |
          $database_name = "product_catalogue_dev"
          $server_name = "${{ secrets.AZURE_SQL_INSTANCE_NAME }}"
          Invoke-Sqlcmd -InputFile "product-catalogue-migration-script.sql" -ServerInstance "$($server_name).database.windows.net" -Database $database_name -Username ${{ secrets.AZURE_SQL_INSTANCE_ADMINISTRATOR_LOGIN_USERNAME }} -Password ${{ secrets.AZURE_SQL_INSTANCE_ADMINISTRATOR_LOGIN_PASSWORD }}

      - name: Delete firewall rule
        run: |
          $temp_firewall_rule_name = "temp_firewall_rule_name"
          az sql server firewall-rule delete -g "dev_product_catalogue" -s "${{ secrets.AZURE_SQL_INSTANCE_NAME }}" -n $temp_firewall_rule_name
  
  apps:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: 'Az CLI login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: deploy static web app
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: "${{ secrets.static_webapp_api_key }}"
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "artifacts/${{inputs.artifactNameStaticWebsite}}"
          output_location: ""
          skip_app_build: true
      
      ## A B1 webapp doesn't have slots so I don't think its possible to deploy to a B1 webapp using azure/webapps-deploy@v2
      - name: Deploy api source code
        working-directory: ${{github.workspace}}/artifacts/${{inputs.artifactNameAPI}}
        run: > 
          az webapp deployment source config-zip 
          -g ${{ inputs.resource_group_name }} 
          -n ${{ inputs.api_app_name }} --src api.zip